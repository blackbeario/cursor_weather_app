---
description: 
globs: 
---
# File Structure Guidelines

## Layer Organization

### Domain Layer
- `{feature}_model.dart`: Core domain models using Freezed
- `i_{feature}_service.dart`: Service interfaces
- `i_{feature}_analytics.dart`: Analytics interfaces
- `{feature}_error.dart`: Feature-specific error types
- `i_{feature}_repository.dart`: Repository interfaces

### Application Layer
- `{feature}_state.dart`: Immutable state definitions
- `{feature}_cubit.dart`: State management implementation

### Infrastructure Layer
- `dtos/{feature}_dto.dart`: Data Transfer Objects
- `{feature}_service.dart`: Service implementations
- `mappers/{feature}_mapper.dart`: DTO to domain model mappers

### Presentation Layer
- `{feature}_widget.dart`: Main widget implementation
- `widgets/`: Feature-specific widgets
- `screens/`: Feature screens

## Naming Conventions
- Use snake_case for file names
- Prefix interfaces with 'I'
- Suffix DTOs with 'DTO'
- Suffix mappers with 'Mapper'
- Group related files in appropriate directories

## File Content Guidelines
- One class per file
- Keep files focused and single-responsibility
- Include necessary imports at the top
- Add brief file documentation
- Group related functionality

## Directory Structure
```
feature/
├── domain/
│   ├── models/
│   ├── services/
├── application/
│   ├── state/
│   └── cubits/
├── infrastructure/
│   ├── dtos/
│   ├── services/
│   └── mappers/
└── presentation/
    ├── widgets/
    └── screens/
```

## Best Practices
- Maintain clear layer separation
- Follow consistent naming patterns
- Group related files together
- Keep directory structure flat when possible
- Use index files for exports when needed 